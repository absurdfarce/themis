/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.datastax.zdm.validate;

import com.datastax.zdm.validate.cluster.Cluster;
import com.datastax.zdm.validate.cluster.ClusterFactory;
import com.google.common.base.Splitter;
import com.google.common.collect.Iterators;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.Iterator;

public class Themis {

    private static Logger logger = LoggerFactory.getLogger(com.datastax.zdm.validate.Themis.class);

    // ---------------------------------- Commands supported by the CLI ----------------------------------
    private static void origin(Iterator<String> bits, ValidatorApp.Builder builder) {
        System.out.println("Adding origin cluster");
        try {

            Cluster newCluster = evalClusterArgs(bits);
            builder.withOrigin(newCluster);
            System.out.println(String.format("Added origin cluster: %s", newCluster.toString()));
        }
        catch (ValidatorException ve) {
            System.out.println(String.format("Error creating origin cluster, please try again: %s", ve.getMessage()));
        }
    }

    private static void target(Iterator<String> bits, ValidatorApp.Builder builder) {
        System.out.println("Adding target cluster");
        try {

            Cluster newCluster = evalClusterArgs(bits);
            builder.withTarget(newCluster);
            System.out.println(String.format("Added target cluster: %s", newCluster.toString()));
        }
        catch (ValidatorException ve) {
            System.out.println(String.format("Error creating target cluster, please try again: %s", ve.getMessage()));
        }
    }

    private static void proxy(Iterator<String> bits, ValidatorApp.Builder builder) {
        System.out.println("Adding proxy cluster");
        try {

            Cluster newCluster = evalClusterArgs(bits);
            builder.withProxy(newCluster);
            System.out.println(String.format("Added proxy cluster: %s", newCluster.toString()));
        }
        catch (ValidatorException ve) {
            System.out.println(String.format("Error creating proxy cluster, please try again: %s", ve.getMessage()));
        }
    }

    private static void exit() {
        System.out.println("Okay, I'm exiting!");
        System.exit(0);
    }

    // ---------------------------------- Utility functions ----------------------------------
    private static Cluster evalClusterArgs(Iterator<String> args)
    throws ValidatorException {

        String first = args.next();
        if (first.equals("-a")) {

            Path scb = FileSystems.getDefault().getPath(args.next());
            return ClusterFactory.buildAstraCluster(scb, args.next(), args.next());
        }
        else {

            String localDc = first;
            String addressStr = args.next();
            InetAddress address = null;
            try { address = InetAddress.getByName(addressStr); }
            catch (UnknownHostException uhe) {
                throw new ValidatorException(String.format("Exception parsing inet address %s", addressStr), uhe);
            }
            String portStr = args.next();
            int port = -1;
            try { port = Integer.parseInt(portStr); }
            catch (NumberFormatException nfe) {
                throw new ValidatorException(String.format("Exception parsing port %s", portStr), nfe);
            }

            return ClusterFactory.buildLocalCluster(localDc, address, port);
        }
    }

    private static void runCommandLoop(BufferedReader reader)
    throws ValidatorException {

        String line;
        Splitter lineSplitter = Splitter.onPattern("\\s").trimResults();
        ValidatorApp.Builder builder = ValidatorApp.builder();

        while (true) {
            try { line = reader.readLine().toLowerCase(); }
            catch (IOException ioe) {
                throw new ValidatorException("Exception reading next line", ioe);
            }
            logger.debug("Read line: {}", line);
            Iterator<String> lineBits = Iterators.transform(lineSplitter.split(line).iterator(), s -> s.toLowerCase());
            switch (lineBits.next()) {
                case "origin":
                    origin(lineBits, builder);
                    break;
                case "target":
                    target(lineBits, builder);
                    break;
                case "proxy":
                    proxy(lineBits, builder);
                    break;
                case "exit":
                    exit();
                default: System.out.println(String.format("Unrecognized command: %s", line));
            }
        }
    }

    public static void main(String[] args) {

        System.out.println("Welcome to the zdm validator!");
        BufferedReader reader =
                new BufferedReader(
                        new InputStreamReader(System.in));

        try { runCommandLoop(reader); }
        catch (Exception e) {
            logger.error("Exception in run loop", e);
            System.out.println("Exception observed, check log for details");
            System.exit(1);
        }
    }
}
